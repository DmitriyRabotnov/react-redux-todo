The links that control the visibilityFilter do not currently behave like real links. 
I'd like to change it so that the background works and the current URL updates when 
I click on these links and change the current visibilityFilter.

Ссылки, управляющие visibilityFilter, в настоящее время не ведут себя как реальные ссылки.
Я бы хотел изменить его так, чтобы фон работал и текущие обновления URL, когда
Я нажимаю на эти ссылки и меняю текущий видимый фильтр.


I will add a parameter to my Route called filter, and I need to wrap it in parenthesis to tell 
react-router that it's optional, because if it's not specified, I want to show all todos.

Я добавлю параметр в свой маршрут под названием filter, и мне нужно его обвести в скобках, чтобы сказать
React-router, это необязательно, потому что, если он не указан, я хочу показать все todos.

index.js

const Root = ({ store }) => (
  <Provider store={store}>
    <Router history={browserHistory}>
      <Route path='/(:filter)' component={App} />
    </Router>
  </Provider>
);
Now I'm opening the Footer component that displays the links. Right now, I'm using the custom convention for the 
filter prop, but I'm going to change this to align more closely with the paths I want to be displayed, 
so I'm using ACTIVE and COMPLETED for the active and completed paths, and to avoid passing an empty string,
I'll just use a null string to signify the default path.

Теперь я открываю компонент Footer, который отображает ссылки. Сейчас я использую пользовательское соглашение для
Filter prop, но я собираюсь изменить это, чтобы отобразить более более точно путь, который я хочу отобразить,
Поэтому я использую ACTIVE и COMPLETED для активных и завершенных ссылок, и чтобы не передавать пустую строку,
Я просто использую пустую строку, чтобы указать путь по умолчанию.

Footer.js

const Footer = () => (
  <p>
    Show:
    {" "}
    <FilterLink filter="SHOW_ALL">
      All
    </FilterLink>
    {", "}
    <FilterLink filter="SHOW_ACTIVE">
      Active
    </FilterLink>
    {", "}
    <FilterLink filter="SHOW_COMPLETED">
      Completed
    </FilterLink>
  </p>
);
My current implementation of the filterLink component dispatches an action every time it's clicked, 
and reads its active state from the store, comparing its filter prop to the visibilityFilter in the store.

Моя текущая реализация компонента filterLink отправляет действие каждый раз, когда он нажат,
И считывает его активное состояние из хранилища, сравнивая его фильтр с visibilityFilter в хранилище.


However, I'm not going to need this implementation anymore because I want the Router to be in control of any 
state that is in the URL. This is why I import link from react-router, and my new implementation of the 
FilterLink component is going to use it.

Однако мне больше не нужна эта реализация, потому что я хочу, чтобы Router контролировал любые
Состояние, указанное в URL-адресе. Вот почему я импортирую ссылку из React Router, и моя новая 
реализация компонента FilterLink собирается его использовать.

FilterLink.js

import React from 'react';
import { Link } from 'react-router';

const FilterLink = ()
It accepts filter as a prop, and it renders through the link provided by react-router.
Its true prop corresponds to the path that we want the link to point to, so if the filter is all we're going 
to use the root path. Otherwise, we'll just use the filter itself as the path.


Он принимает фильтр как prop и отображает его по ссылке, предоставляемой react-router.
Его истинный prop соответствует пути, на который мы хотим указать ссылку, поэтому, если фильтр - это все, что нам нужно
для использования корневого пути. В противном случае мы будем использовать только сам фильтр в качестве пути.

FilterLink.js

import React from 'react';
import { Link } from 'react-router';

const FilterLink = ({ filter }) => (
  <Link
    to={filter === 'all' ? '' : filter}

);
I am also specifying the active style prop so that the link is styled differently when its true prop matches 
the current path. 
Finally, I'm passing children to the link itself, and I'm adding children as a prop to FilterLink so that the parent component can specify the children.


Я также указываю active style prop, чтобы ссылка оформлялась по-разному, когда ее подлинные prop совпадают
с текущим путем.
Наконец, я передаю дочерние элементы самой ссылке, и я добавляю дочерние элементы в качестве props для FilterLink, 
чтобы родительский компонент мог указывать дочерние элементы.

FilterLink.js

import React from 'react';
import { Link } from 'react-router';

const FilterLink = ({ filter }) => (
  <Link
    to={filter === 'all' ? '' : filter}
    activeStyle={{
      textDecoration: 'none',
      color: 'black',
    }}
  >
    {children}
  </Link>
);

export default FilterLink;

Now I'm exporting filter link, and I have some cleanup to do. 
I can remove the setVisibilityFilter action-creator, as I don't use it anymore. 
I can also remove my custom link component, because now I'm using the link from react-router instead of it.

Теперь я экспортирую ссылку фильтра, и мне нужно выполнить некоторую очистку. 
Я могу удалить setVisibilityFilter action-creator, так как я больше его не использую. 
Я также могу удалить свой компонент пользовательской ссылки, потому что теперь я использую ссылку от 
react-router вместо него.

If I run the app now, clicking on the link will update the URL bar. 
It also works in the other direction. Clicking on the back or forward buttons gets the corresponding link active.

Если теперь запустить приложение, нажатие на ссылку обновит URL-адрес. Он также работает в другом направлении. 
При нажатии на кнопки «Назад» или «Вперед» передает соответствующую активную ссылку.

Then we will teach our component to read the current filter from the URL instead of Redux store.
Затем мы научим наш компонент читать текущий фильтр с URL-адреса вместо хранилища Redux.