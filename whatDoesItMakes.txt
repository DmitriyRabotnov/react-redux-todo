We're going to add some asynchronous fetching to the app. This is why I'm removing all the code related to the 
localStorage, and I'm going to delete the localStorage.js, as well.

Добавим асинхронную загрузку приложения. 
Вот почему я удаляю весь код, связанный с localStorage, и я 
также собираюсь удалить localStorage.js.


I also added a new module that implements a fake remote API. It's not really remote.
I keep all the todos in memory, but I also added an artificial delay. 
I have methods that return promises just like a real API implementation. But instead, it just pretends that it calls the server and returns the todos from the in memory database.

Я также добавил новый модуль, который реализует поддельный удаленный API. 
Это не совсем так. Я храню все todos в памяти, но я также добавил искусственную задержку. 
У меня есть методы, которые возвращают Promise так же, как реальная реализация API. 
Но вместо этого он просто делает вид, что вызывает сервер и возвращает todos из базы данных в памяти.

src/api/index.js

const delay = (ms) =>
  new Promise(resolve => setTimeout(resolve, ms));

export const fetchTodos = (filter) =>
  delay(500).then(() => {
    switch (filter) {
      case 'all':
        return fakeDatabase.todos;
      case 'active':
        return fakeDatabase.todos.filter(t => !t.completed);
      case 'completed':
        return fakeDatabase.todos.filter(t => t.completed);
      default:
        throw new Error(`Unknown filter: ${filter}`);
    }
  });
This approach lets us explore how Redux works with asynchronous data fetching without writing a real backend for the app. Now I can open any other module of my app and I can import fetchTodos from the API module.

Этот подход позволяет нам изучить, 
как Redux работает с асинхронной выборкой данных без написания реального бэкэнда для приложения. 
Теперь я могу открыть любой другой модуль моего приложения, и я могу импортировать fetchTodos из модуля API.

src/index.js

import { fetchTodos } from './api';
We will learn how to put these todos into the Redux store later. But for now, let's just make sure that calling fetchTodos() with a filter argument returns a promise that results through an array of todos just like a REST backend would return an array.

The fake API waits for half a second to simulate the network connection, and then resolves the promise to an array of todos that we will treat as if they were retrieved from a remote server.
